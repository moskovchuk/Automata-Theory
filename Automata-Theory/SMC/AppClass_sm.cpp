//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : AppClass.sm
//

#include "AppClass.h"
#include "AppClass_sm.h"
#include "/Users/anastasia/Desktop/Lab_1/SMC/lib/C++/statemap.h"

using namespace statemap;

// Static class declarations.
MainMap_Start MainMap::Start("MainMap::Start", 0);
MainMap_type_contact MainMap::type_contact("MainMap::type_contact", 1);
MainMap_state_1 MainMap::state_1("MainMap::state_1", 2);
MainMap_state_2 MainMap::state_2("MainMap::state_2", 3);
MainMap_state_3 MainMap::state_3("MainMap::state_3", 4);
MainMap_state_4 MainMap::state_4("MainMap::state_4", 5);
MainMap_user_name MainMap::user_name("MainMap::user_name", 6);
MainMap_server_name MainMap::server_name("MainMap::server_name", 7);
MainMap_zone_name MainMap::zone_name("MainMap::zone_name", 8);
MainMap_Error MainMap::Error("MainMap::Error", 9);
MainMap_OK MainMap::OK("MainMap::OK", 10);

void AppClassState::EOS(AppClassContext& context)
{
    Default(context);
}

void AppClassState::digit(AppClassContext& context, char dig)
{
    Default(context);
}

void AppClassState::dog(AppClassContext& context, char dg)
{
    Default(context);
}

void AppClassState::dot(AppClassContext& context, char dt)
{
    Default(context);
}

void AppClassState::dots(AppClassContext& context, char dts)
{
    Default(context);
}

void AppClassState::equal(AppClassContext& context, char equ)
{
    Default(context);
}

void AppClassState::letter(AppClassContext& context, char let)
{
    Default(context);
}

void AppClassState::question(AppClassContext& context, char quest)
{
    Default(context);
}

void AppClassState::restart(AppClassContext& context)
{
    Default(context);
}

void AppClassState::unknown(AppClassContext& context, char unk)
{
    Default(context);
}

void AppClassState::Default(AppClassContext& context)
{
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "TRANSITION   : Default"
            << std::endl;
    }

    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void MainMap_Default::restart(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Default"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Default::restart()"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.ClearCash();
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::Default::restart()"
                << std::endl;
        }

        context.setState(MainMap::Start);
    }
    catch (...)
    {
        context.setState(MainMap::Start);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_Default::letter(AppClassContext& context, char let)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Default"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Default::letter(char let)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(let);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::Default::letter(char let)"
                << std::endl;
        }

        context.setState(MainMap::Error);
    }
    catch (...)
    {
        context.setState(MainMap::Error);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_Default::digit(AppClassContext& context, char dig)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Default"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Default::digit(char dig)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(dig);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::Default::digit(char dig)"
                << std::endl;
        }

        context.setState(MainMap::Error);
    }
    catch (...)
    {
        context.setState(MainMap::Error);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_Default::dots(AppClassContext& context, char dts)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Default"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Default::dots(char dts)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(dts);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::Default::dots(char dts)"
                << std::endl;
        }

        context.setState(MainMap::Error);
    }
    catch (...)
    {
        context.setState(MainMap::Error);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_Default::dot(AppClassContext& context, char dt)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Default"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Default::dot(char dt)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(dt);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::Default::dot(char dt)"
                << std::endl;
        }

        context.setState(MainMap::Error);
    }
    catch (...)
    {
        context.setState(MainMap::Error);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_Default::equal(AppClassContext& context, char equ)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Default"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Default::equal(char equ)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(equ);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::Default::equal(char equ)"
                << std::endl;
        }

        context.setState(MainMap::Error);
    }
    catch (...)
    {
        context.setState(MainMap::Error);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_Default::question(AppClassContext& context, char quest)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Default"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Default::question(char quest)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(quest);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::Default::question(char quest)"
                << std::endl;
        }

        context.setState(MainMap::Error);
    }
    catch (...)
    {
        context.setState(MainMap::Error);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_Default::dog(AppClassContext& context, char dg)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Default"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Default::dog(char dg)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(dg);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::Default::dog(char dg)"
                << std::endl;
        }

        context.setState(MainMap::Error);
    }
    catch (...)
    {
        context.setState(MainMap::Error);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_Default::EOS(AppClassContext& context)
{

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Default"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Default::EOS()"
            << std::endl;
    }

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "EXIT TRANSITION : MainMap::Default::EOS()"
            << std::endl;
    }

    context.setState(MainMap::Error);
    context.getState().Entry(context);

}

void MainMap_Default::unknown(AppClassContext& context, char unk)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Default"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Default::unknown(char unk)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(unk);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::Default::unknown(char unk)"
                << std::endl;
        }

        context.setState(MainMap::Error);
    }
    catch (...)
    {
        context.setState(MainMap::Error);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_Start::dots(AppClassContext& context, char dts)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Start"
                << std::endl;
    }

    if (ctxt.title())
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: MainMap::Start::dots(char dts)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.AppendStr(dts);
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : MainMap::Start::dots(char dts)"
                    << std::endl;
            }

            context.setState(MainMap::type_contact);
        }
        catch (...)
        {
            context.setState(MainMap::type_contact);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::dots(context, dts);
    }

}

void MainMap_Start::letter(AppClassContext& context, char let)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::Start"
                << std::endl;
    }

    AppClassState& endState = context.getState();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::Start::letter(char let)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(let);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::Start::letter(char let)"
                << std::endl;
        }

        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

}

void MainMap_type_contact::letter(AppClassContext& context, char let)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::type_contact"
                << std::endl;
    }

    AppClassState& endState = context.getState();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::type_contact::letter(char let)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendType(let);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::type_contact::letter(char let)"
                << std::endl;
        }

        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

}

void MainMap_type_contact::question(AppClassContext& context, char quest)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::type_contact"
                << std::endl;
    }

    if (ctxt.type())
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: MainMap::type_contact::question(char quest)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.AppendStr(quest);
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : MainMap::type_contact::question(char quest)"
                    << std::endl;
            }

            context.setState(MainMap::state_1);
        }
        catch (...)
        {
            context.setState(MainMap::state_1);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::question(context, quest);
    }

}

void MainMap_state_1::letter(AppClassContext& context, char let)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::state_1"
                << std::endl;
    }

    if (let == 'j' || let == 'J')
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: MainMap::state_1::letter(char let)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.AppendStr(let);
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : MainMap::state_1::letter(char let)"
                    << std::endl;
            }

            context.setState(MainMap::state_2);
        }
        catch (...)
        {
            context.setState(MainMap::state_2);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }

}

void MainMap_state_2::letter(AppClassContext& context, char let)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::state_2"
                << std::endl;
    }

    if (let == 'i' || let == 'I')
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: MainMap::state_2::letter(char let)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.AppendStr(let);
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : MainMap::state_2::letter(char let)"
                    << std::endl;
            }

            context.setState(MainMap::state_3);
        }
        catch (...)
        {
            context.setState(MainMap::state_3);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }

}

void MainMap_state_3::letter(AppClassContext& context, char let)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::state_3"
                << std::endl;
    }

    if (let == 'd' || let == 'D')
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: MainMap::state_3::letter(char let)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.AppendStr(let);
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : MainMap::state_3::letter(char let)"
                    << std::endl;
            }

            context.setState(MainMap::state_4);
        }
        catch (...)
        {
            context.setState(MainMap::state_4);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::letter(context, let);
    }

}

void MainMap_state_4::equal(AppClassContext& context, char equ)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::state_4"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::state_4::equal(char equ)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(equ);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::state_4::equal(char equ)"
                << std::endl;
        }

        context.setState(MainMap::user_name);
    }
    catch (...)
    {
        context.setState(MainMap::user_name);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_user_name::digit(AppClassContext& context, char dig)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::user_name"
                << std::endl;
    }

    AppClassState& endState = context.getState();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::user_name::digit(char dig)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(dig);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::user_name::digit(char dig)"
                << std::endl;
        }

        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

}

void MainMap_user_name::dog(AppClassContext& context, char dg)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::user_name"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::user_name::dog(char dg)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(dg);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::user_name::dog(char dg)"
                << std::endl;
        }

        context.setState(MainMap::server_name);
    }
    catch (...)
    {
        context.setState(MainMap::server_name);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_user_name::letter(AppClassContext& context, char let)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::user_name"
                << std::endl;
    }

    AppClassState& endState = context.getState();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::user_name::letter(char let)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(let);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::user_name::letter(char let)"
                << std::endl;
        }

        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

}

void MainMap_server_name::digit(AppClassContext& context, char dig)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::server_name"
                << std::endl;
    }

    AppClassState& endState = context.getState();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::server_name::digit(char dig)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendServer(dig);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::server_name::digit(char dig)"
                << std::endl;
        }

        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

}

void MainMap_server_name::dot(AppClassContext& context, char dt)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::server_name"
                << std::endl;
    }

    context.getState().Exit(context);
    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::server_name::dot(char dt)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendStr(dt);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::server_name::dot(char dt)"
                << std::endl;
        }

        context.setState(MainMap::zone_name);
    }
    catch (...)
    {
        context.setState(MainMap::zone_name);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_server_name::letter(AppClassContext& context, char let)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::server_name"
                << std::endl;
    }

    AppClassState& endState = context.getState();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::server_name::letter(char let)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendServer(let);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::server_name::letter(char let)"
                << std::endl;
        }

        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

}

void MainMap_zone_name::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::zone_name"
                << std::endl;
    }

    if (ctxt.NotTooLong())
    {
        context.getState().Exit(context);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: MainMap::zone_name::EOS()"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.UpdateStatistic();
            ctxt.setAcceptable();
            if (context.getDebugFlag())
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : MainMap::zone_name::EOS()"
                    << std::endl;
            }

            context.setState(MainMap::OK);
        }
        catch (...)
        {
            context.setState(MainMap::OK);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
         MainMap_Default::EOS(context);
    }

}

void MainMap_zone_name::letter(AppClassContext& context, char let)
{
    AppClass& ctxt = context.getOwner();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "LEAVING STATE   : MainMap::zone_name"
                << std::endl;
    }

    AppClassState& endState = context.getState();

    if (context.getDebugFlag())
    {
        std::ostream& str = context.getDebugStream();

        str << "ENTER TRANSITION: MainMap::zone_name::letter(char let)"
            << std::endl;
    }

    context.clearState();
    try
    {
        ctxt.AppendZone(let);
        if (context.getDebugFlag())
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : MainMap::zone_name::letter(char let)"
                << std::endl;
        }

        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

}

//
// Local variables:
//  buffer-read-only: t
// End:
//
